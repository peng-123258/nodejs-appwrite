name: 检查并重新部署 Appwrite Site
on:
  schedule:
    - cron: '*/15 * * * *' # 每15分钟自动运行一次
  workflow_dispatch: # 允许手动触发

jobs:
  cleanup-and-redeploy:
    runs-on: ubuntu-latest
    env:
      # 将所有 secrets 放入环境变量，方便复用
      APPWRITE_ENDPOINT: ${{ secrets.APPWRITE_API_ENDPOINT || 'https://syd.cloud.appwrite.io/v1' }}
      APPWRITE_PROJECT_ID: ${{ secrets.APPWRITE_PROJECT_ID }}
      APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
      GIT_CFSUB_PAT: ${{ secrets.GIT_CFSUB_PAT }}
      APPWRITE_SITE_ID: ${{ secrets.APPWRITE_SITE_ID }}

    steps:
      - name: 检查环境变量
        run: |
          if [ -z "$APPWRITE_PROJECT_ID" ]; then echo "::error::Secret 'APPWRITE_PROJECT_ID' 未设置！"; exit 1; fi
          if [ -z "$APPWRITE_SITE_ID" ]; then echo "::error::Secret 'APPWRITE_SITE_ID' 未设置！"; exit 1; fi
          if [ -z "$APPWRITE_API_KEY" ]; then echo "::error::Secret 'APPWRITE_API_KEY' 未设置！"; exit 1; fi
          if [ -z "$GIT_CFSUB_PAT" ]; then echo "::error::Secret 'GIT_CFSUB_PAT' 未设置！"; exit 1; fi
          echo "所有 Secrets 都已加载。"

      - name: 安装 Appwrite CLI 和 JQ
        run: |
          npm install -g appwrite-cli
          sudo apt-get update && sudo apt-get install -y jq

      - name: Appwrite CLI 登录
        run: |
          appwrite login --endpoint "${APPWRITE_ENDPOINT}" --project-id "${APPWRITE_PROJECT_ID}" --key "${APPWRITE_API_KEY}"
          echo "Appwrite CLI 登录并配置成功！"

      - name: 检查状态并决定是否重新部署
        id: check_status
        run: |
          echo "正在获取部署列表..."
          DEPLOYMENTS_JSON=$(appwrite sites list-deployments --site-id "${APPWRITE_SITE_ID}" --json)
          
          HAS_FAILED=$(echo "$DEPLOYMENTS_JSON" | jq -r 'any(.deployments[]; .status == "failed")')
          TOTAL_DEPLOYMENTS=$(echo "$DEPLOYMENTS_JSON" | jq -r '.total')

          if [ "$HAS_FAILED" == "true" ] || [ "$TOTAL_DEPLOYMENTS" -eq 0 ]; then
            if [ "$TOTAL_DEPLOYMENTS" -eq 0 ]; then
              echo "没有发现任何部署，将触发首次部署。"
            else
              echo "发现一个或多个失败的部署。"
            fi
            echo "should_redeploy=true" >> $GITHUB_OUTPUT
          else
            echo "状态正常，本次无需触发新部署。"
            echo "should_redeploy=false" >> $GITHUB_OUTPUT
          fi

      - name: 触发新部署、提取日志并清理
        if: steps.check_status.outputs.should_redeploy == 'true'
        run: |
          # 1. 清理所有现有部署
          echo "正在清理所有现有部署..."
          DEPLOYMENTS_JSON=$(appwrite sites list-deployments --site-id "${APPWRITE_SITE_ID}" --json)
          ALL_DEPLOYMENT_IDS=$(echo "$DEPLOYMENTS_JSON" | jq -r '.deployments[]."$id"')
          if [ -n "$ALL_DEPLOYMENT_IDS" ]; then
            for ID in $ALL_DEPLOYMENT_IDS; do
              echo "  - 正在删除部署，ID: ${ID}"
              appwrite sites delete-deployment --site-id "${APPWRITE_SITE_ID}" --deployment-id "${ID}" --force
            done
            echo "已完成所有旧部署的清理。"
          else
            echo "没有需要清理的部署。"
          fi
          
          # 2. 直接使用 CLI 触发基于 Git 的新部署
          echo "正在直接触发一次新的 Git 部署 (使用 CLI)..."
          NEW_DEPLOYMENT_JSON=$(appwrite sites create-deployment --site-id "${APPWRITE_SITE_ID}" --activate --json --force)
          NEW_DEPLOYMENT_ID=$(echo "$NEW_DEPLOYMENT_JSON" | jq -r '."$id"')
          
          if [ -z "$NEW_DEPLOYMENT_ID" ] || [ "$NEW_DEPLOYMENT_ID" == "null" ]; then
            echo "::error::使用 CLI 触发新部署失败！"
            echo "API 响应: $NEW_DEPLOYMENT_JSON"
            exit 1
          fi
          echo "已成功触发新部署，ID: ${NEW_DEPLOYMENT_ID}"

          # 3. 轮询获取日志并提取节点信息
          echo "等待构建日志生成..."
          BASE64_NODE=""
          for i in {1..10}; do # 循环尝试100秒
            sleep 10
            echo "正在获取日志 (尝试次数: $i)..."
            LOGS_OUTPUT=$(curl -s --location --request GET "${APPWRITE_ENDPOINT}/sites/${APPWRITE_SITE_ID}/deployments/${NEW_DEPLOYMENT_ID}/builds/1/logs" \
            --header "X-Appwrite-Project: ${APPWRITE_PROJECT_ID}" \
            --header "X-Appwrite-Key: ${APPWRITE_API_KEY}")
            BASE64_NODE=$(echo "$LOGS_OUTPUT" | jq -r '.logs' | grep -oE '[A-Za-z0-9+/=]{200,}' | head -n 1)
            if [ -n "$BASE64_NODE" ]; then
              echo "已成功从日志中提取节点信息！"
              break
            fi
          done

          if [ -z "$BASE64_NODE" ]; then
            echo "::error::超时：在100秒内未能从日志中提取到节点信息。"
            exit 1
          fi

          # 4. 推送到另一个仓库
          echo "正在将节点信息推送到 CFSub 仓库..."
          echo "$BASE64_NODE" > appwrite_base64.txt
          git clone https://x-access-token:${GIT_CFSUB_PAT}@github.com/yutian81/CFSub.git cfsub_repo
          mv appwrite_base64.txt cfsub_repo/nodes/
          cd cfsub_repo
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add nodes/appwrite_base64.txt
          if git diff --staged --quiet; then
            echo "节点信息无变化，无需推送。"
          else
            git commit -m "自动更新 Appwrite 节点信息"
            git push
            echo "已成功将新节点信息推送到 CFSub 仓库。"
          fi
