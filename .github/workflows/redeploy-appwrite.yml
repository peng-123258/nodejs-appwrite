name: 检查并重新部署 Appwrite Site

on:
  schedule:
    - cron: '*/15 * * * *' # 每15分钟自动运行一次
  workflow_dispatch: # 允许手动触发

jobs:
  check-and-redeploy:
    runs-on: ubuntu-latest
    env:
      APPWRITE_PROJECT_ID: ${{ secrets.APPWRITE_PROJECT_ID }}
      APPWRITE_SITE_ID: ${{ secrets.APPWRITE_SITE_ID }}
      APPWRITE_REPO_ID: ${{ secrets.APPWRITE_REPO_ID }}
      APPWRITE_API_ENDPOINT: ${{ secrets.APPWRITE_API_ENDPOINT }}
      APPWRITE_API_KEY: ${{ secrets.APPWRITE_API_KEY }}
      GIT_CFSUB_PAT: ${{ secrets.GIT_CFSUB_PAT }}

    steps:
      - name: 获取部署状态
        id: get_status
        run: |
          echo "正在获取部署列表..."
          DEPLOYMENTS_JSON=$(curl -s --location --request GET "${APPWRITE_API_ENDPOINT}/sites/${APPWRITE_SITE_ID}/deployments" \
          --header "X-Appwrite-Project: ${APPWRITE_PROJECT_ID}" \
          --header "X-Appwrite-Key: ${APPWRITE_API_KEY}")
          
          # 查找所有失败部署的ID
          FAILED_DEPLOYMENT_IDS=$(echo "$DEPLOYMENTS_JSON" | jq -r '.deployments[] | select(.status == "failed") | ."$id"')
          
          if [ -n "$FAILED_DEPLOYMENT_IDS" ]; then
            echo "发现一个或多个失败的部署。"
            # 将所有失败的ID转换为单行，用作下一步的输入
            FAILED_IDS_ONELINE=$(echo "$FAILED_DEPLOYMENT_IDS" | tr '\n' ' ')
            echo "failed_ids=${FAILED_IDS_ONELINE}" >> $GITHUB_OUTPUT
            echo "status=failed" >> $GITHUB_OUTPUT
          else
            echo "没有发现失败的部署，状态正常。"
            echo "status=ok" >> $GITHUB_OUTPUT
          fi

      - name: 处理失败的部署
        if: steps.get_status.outputs.status == 'failed'
        run: |
          # 1. 触发新的部署
          echo "正在触发一次新的部署..."
          NEW_DEPLOYMENT_JSON=$(curl -s --location --request POST "${APPWRITE_API_ENDPOINT}/sites/${APPWRITE_SITE_ID}/deployments" \
          --header "Content-Type: application/json" \
          --header "X-Appwrite-Project: ${APPWRITE_PROJECT_ID}" \
          --header "X-Appwrite-Key: ${APPWRITE_API_KEY}" \
          --data-raw '{
              "providerRepositoryId": "'"$APPWRITE_REPO_ID"'",
              "providerBranch": "main",
              "activate": true
          }')
          
          NEW_DEPLOYMENT_ID=$(echo "$NEW_DEPLOYMENT_JSON" | jq -r '."$id"')
          if [ -z "$NEW_DEPLOYMENT_ID" ] || [ "$NEW_DEPLOYMENT_ID" == "null" ]; then
            echo "::error::触发新部署失败！"
            exit 1
          fi
          echo "已成功触发新部署，ID: ${NEW_DEPLOYMENT_ID}"

          # 2. 轮询获取新部署的日志并提取节点信息
          echo "等待构建日志生成..."
          BASE64_NODE=""
          # 循环尝试最多5分钟 (30次 * 10秒)
          for i in {1..30}; do
            sleep 10
            echo "正在获取日志 (尝试次数: $i)..."
            LOGS_OUTPUT=$(curl -s --location --request GET "${APPWRITE_API_ENDPOINT}/sites/${APPWRITE_SITE_ID}/deployments/${NEW_DEPLOYMENT_ID}/builds/1/logs" \
            --header "X-Appwrite-Project: ${APPWRITE_PROJECT_ID}" \
            --header "X-Appwrite-Key: ${APPWRITE_API_KEY}")

            # 使用 grep 和正则表达式来匹配 Base64 字符串
            BASE64_NODE=$(echo "$LOGS_OUTPUT" | jq -r '.logs' | grep -oE '[A-Za-z0-9+/=]{200,}' | head -n 1)

            if [ -n "$BASE64_NODE" ]; then
              echo "已成功从日志中提取节点信息！"
              break
            fi
          done

          if [ -z "$BASE64_NODE" ]; then
            echo "::error::超时：在5分钟内未能从日志中提取到节点信息。"
            exit 1
          fi

          # 3. 将节点信息写入文件并推送到另一个仓库
          echo "正在将节点信息推送到 CFSub 仓库..."
          echo "$BASE64_NODE" > appwrite_base64.txt
          
          git clone https://x-access-token:${GIT_CFSUB_PAT}@github.com/yutian81/CFSub.git
          
          mv appwrite_base64.txt CFSub/nodes/
          cd CFSub
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add nodes/appwrite_base64.txt

          if git diff --staged --quiet; then
            echo "节点信息无变化，无需推送。"
          else
            git commit -m "自动更新 Appwrite 节点信息"
            git push
            echo "已成功将新节点信息推送到 CFSub 仓库。"
          fi
          cd ..

          # 4. 删除所有旧的、失败的部署
          echo "正在删除所有失败的部署..."
          for FAILED_ID in ${{ steps.get_status.outputs.failed_ids }}; do
            echo "正在删除失败的部署，ID: ${FAILED_ID}"
            curl --location --request DELETE "${APPWRITE_API_ENDPOINT}/sites/${APPWRITE_SITE_ID}/deployments/${FAILED_ID}" \
            --header "X-Appwrite-Project: ${APPWRITE_PROJECT_ID}" \
            --header "X-Appwrite-Key: ${APPWRITE_API_KEY}"
          done
          echo "已删除所有失败的部署。"
